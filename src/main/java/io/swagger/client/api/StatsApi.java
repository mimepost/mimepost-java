/*
 * MimePost API Reference (Beta)
 * MimePost API for sending email.  You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@mimepost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import com.mimepost.ApiCallback;
import com.mimepost.ApiClient;
import com.mimepost.ApiException;
import com.mimepost.ApiResponse;
import com.mimepost.Configuration;
import com.mimepost.Pair;
import com.mimepost.ProgressRequestBody;
import com.mimepost.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mimepost.model.ApiResponseEmaillogs;
import com.mimepost.model.ApiResponseStats;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatsApi {
    private ApiClient apiClient;

    public StatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for emaillogsGet
     * @param startDate Start Date in yyyymmdd format example 20190801 (required)
     * @param endDate End Date in yyyymmdd format example 20190803 (required)
     * @param status  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emaillogsGetCall(String startDate, String endDate, String status, String to, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emaillogs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emaillogsGetValidateBeforeCall(String startDate, String endDate, String status, String to, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling emaillogsGet(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling emaillogsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = emaillogsGetCall(startDate, endDate, status, to, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the logs of a particular date
     * 
     * @param startDate Start Date in yyyymmdd format example 20190801 (required)
     * @param endDate End Date in yyyymmdd format example 20190803 (required)
     * @param status  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponseEmaillogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseEmaillogs emaillogsGet(String startDate, String endDate, String status, String to, Integer page, Integer limit) throws ApiException {
        ApiResponse<ApiResponseEmaillogs> resp = emaillogsGetWithHttpInfo(startDate, endDate, status, to, page, limit);
        return resp.getData();
    }

    /**
     * Get the logs of a particular date
     * 
     * @param startDate Start Date in yyyymmdd format example 20190801 (required)
     * @param endDate End Date in yyyymmdd format example 20190803 (required)
     * @param status  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;ApiResponseEmaillogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseEmaillogs> emaillogsGetWithHttpInfo(String startDate, String endDate, String status, String to, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = emaillogsGetValidateBeforeCall(startDate, endDate, status, to, page, limit, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseEmaillogs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the logs of a particular date (asynchronously)
     * 
     * @param startDate Start Date in yyyymmdd format example 20190801 (required)
     * @param endDate End Date in yyyymmdd format example 20190803 (required)
     * @param status  (optional)
     * @param to  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emaillogsGetAsync(String startDate, String endDate, String status, String to, Integer page, Integer limit, final ApiCallback<ApiResponseEmaillogs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emaillogsGetValidateBeforeCall(startDate, endDate, status, to, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseEmaillogs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for statsGet
     * @param startDate Start Date in yyyymmdd format example 20190801 (required)
     * @param endDate End Date in yyyymmdd format example 20190803 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statsGetCall(String startDate, String endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statsGetValidateBeforeCall(String startDate, String endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling statsGet(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling statsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = statsGetCall(startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the summary of stats for a range of dates
     * 
     * @param startDate Start Date in yyyymmdd format example 20190801 (required)
     * @param endDate End Date in yyyymmdd format example 20190803 (required)
     * @return ApiResponseStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseStats statsGet(String startDate, String endDate) throws ApiException {
        ApiResponse<ApiResponseStats> resp = statsGetWithHttpInfo(startDate, endDate);
        return resp.getData();
    }

    /**
     * Get the summary of stats for a range of dates
     * 
     * @param startDate Start Date in yyyymmdd format example 20190801 (required)
     * @param endDate End Date in yyyymmdd format example 20190803 (required)
     * @return ApiResponse&lt;ApiResponseStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseStats> statsGetWithHttpInfo(String startDate, String endDate) throws ApiException {
        com.squareup.okhttp.Call call = statsGetValidateBeforeCall(startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the summary of stats for a range of dates (asynchronously)
     * 
     * @param startDate Start Date in yyyymmdd format example 20190801 (required)
     * @param endDate End Date in yyyymmdd format example 20190803 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statsGetAsync(String startDate, String endDate, final ApiCallback<ApiResponseStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statsGetValidateBeforeCall(startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
