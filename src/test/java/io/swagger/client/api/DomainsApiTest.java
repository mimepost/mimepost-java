/*
 * MimePost API Reference (Beta)
 * MimePost API for sending email.  You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@mimepost.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import com.mimepost.ApiException;
import com.mimepost.model.ApiResponseDomainsList;
import com.mimepost.model.Domain;
import com.mimepost.model.ModelApiResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainsApi
 */
@Ignore
public class DomainsApiTest {

    private final DomainsApi api = new DomainsApi();

    
    /**
     * Get a list of all the domains
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsGetTest() throws ApiException {
        ApiResponseDomainsList response = api.domainsGet();

        // TODO: test validations
    }
    
    /**
     * Submit request for the approval of a verified domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsIdApprovePostTest() throws ApiException {
        Integer id = null;
        ModelApiResponse response = api.domainsIdApprovePost(id);

        // TODO: test validations
    }
    
    /**
     * Remove a single domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsIdDeleteTest() throws ApiException {
        Integer id = null;
        ModelApiResponse response = api.domainsIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Get the details of a single domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsIdGetTest() throws ApiException {
        Integer id = null;
        ApiResponseDomainsList response = api.domainsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Request for the verification of DKIM record for a single domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsIdVerifyDkimPostTest() throws ApiException {
        Integer id = null;
        ModelApiResponse response = api.domainsIdVerifyDkimPost(id);

        // TODO: test validations
    }
    
    /**
     * Request for the verification of SPF record for a single domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsIdVerifySpfPostTest() throws ApiException {
        Integer id = null;
        ModelApiResponse response = api.domainsIdVerifySpfPost(id);

        // TODO: test validations
    }
    
    /**
     * Request for the verification of tracking record for a single domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsIdVerifyTrackingPostTest() throws ApiException {
        Integer id = null;
        ModelApiResponse response = api.domainsIdVerifyTrackingPost(id);

        // TODO: test validations
    }
    
    /**
     * Add single domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsPostTest() throws ApiException {
        Domain domain = null;
        ModelApiResponse response = api.domainsPost(domain);

        // TODO: test validations
    }
    
}
